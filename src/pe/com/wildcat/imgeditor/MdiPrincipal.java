/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package pe.com.wildcat.imgeditor;

import java.awt.Color;
import java.awt.Component;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import pe.com.wildcat.imgeditor.util.ByteArrayInOutStream;
import pe.com.wildcat.imgeditor.util.ClosableTabbedPane;
import pe.com.wildcat.imgeditor.util.Constantes;
import pe.com.wildcat.imgeditor.util.FileSelectionFilter;
import pe.com.wildcat.imgeditor.util.FileWrapper;
import pe.com.wildcat.imgeditor.util.ImagePreview;
import pe.com.wildcat.imgeditor.util.ImageSelectionFilter;
import pe.com.wildcat.imgeditor.util.ImgComponent;
import pe.com.wildcat.imgeditor.util.Pixel;
import pe.com.wildcat.imgeditor.util.Project;
import pe.com.wildcat.imgeditor.util.TreeComponentMouseListener;
import pe.com.wildcat.imgeditor.util.Utils;

/**
 *
 * @author cmontes
 */
public class MdiPrincipal extends javax.swing.JFrame{

    /**
     * Creates new form MdiPrincipal
     */
    public MdiPrincipal() {
        initComponents();
        treeComponentMouseListener = new TreeComponentMouseListener(treeRecursos, desktopTabPanel);
        //treeRecursos.addTreeSelectionListener(treeComponentMouseListener);
        treeRecursos.addMouseListener(treeComponentMouseListener);
        setExtendedState(JFrame.MAXIMIZED_BOTH); 
        //setLocationRelativeTo(null);
        //ClosableTabbedPane close = new ClosableTabbedPane();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBarPrincipal = new javax.swing.JToolBar();
        btnSalir = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        btnDeshacer = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        tabbedPaneRecursos = new javax.swing.JTabbedPane();
        scrollPaneRecursos = new javax.swing.JScrollPane();
        project = new Project();
        project.setName("Untitled1");
        root = new DefaultMutableTreeNode(project.getName());
        imagenesNode = new DefaultMutableTreeNode("Imagenes");
        root.add(imagenesNode);
        modelImagenes = new DefaultTreeModel(root);
        treeRecursos = new javax.swing.JTree(modelImagenes);
        tabbedPaneComponentes = new javax.swing.JTabbedPane();
        scrollPaneComponentes = new javax.swing.JScrollPane();
        pnlComponentes = new javax.swing.JPanel();
        desktopTabPanel = new ClosableTabbedPane();
        mnuPrincipal = new javax.swing.JMenuBar();
        mnuArchivo = new javax.swing.JMenu();
        mnuNuevo = new javax.swing.JMenuItem();
        mnuAbrir = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuGuardar = new javax.swing.JMenuItem();
        mnuGuardarComo = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mnuImportImage = new javax.swing.JMenuItem();
        mnuAyuda = new javax.swing.JMenu();
        mnuAcercade = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Image Editor - Programmer");

        toolBarPrincipal.setFloatable(false);
        toolBarPrincipal.setRollover(true);

        btnSalir.setText("Salir");
        btnSalir.setFocusable(false);
        btnSalir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSalir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBarPrincipal.add(btnSalir);

        btnPlay.setText("Play");
        btnPlay.setFocusable(false);
        btnPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });
        toolBarPrincipal.add(btnPlay);

        btnDeshacer.setText("Deshacer");
        btnDeshacer.setFocusable(false);
        btnDeshacer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDeshacer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBarPrincipal.add(btnDeshacer);

        getContentPane().add(toolBarPrincipal, java.awt.BorderLayout.NORTH);

        jSplitPane1.setBackground(new java.awt.Color(255, 255, 255));
        jSplitPane1.setDividerSize(2);

        jSplitPane2.setDividerSize(3);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setMinimumSize(new java.awt.Dimension(200, 107));

        scrollPaneRecursos.setViewportView(treeRecursos);

        tabbedPaneRecursos.addTab("Recursos", scrollPaneRecursos);

        jSplitPane2.setLeftComponent(tabbedPaneRecursos);
        tabbedPaneRecursos.getAccessibleContext().setAccessibleName("Recursos");

        scrollPaneComponentes.setViewportView(pnlComponentes);

        tabbedPaneComponentes.addTab("Componentes", scrollPaneComponentes);

        jSplitPane2.setRightComponent(tabbedPaneComponentes);
        tabbedPaneComponentes.getAccessibleContext().setAccessibleDescription("");

        jSplitPane1.setLeftComponent(jSplitPane2);

        desktopTabPanel.setBackground(new java.awt.Color(255, 255, 255));
        jSplitPane1.setRightComponent(desktopTabPanel);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        mnuArchivo.setMnemonic('A');
        mnuArchivo.setText("Archivo");

        mnuNuevo.setMnemonic('N');
        mnuNuevo.setText("Nuevo");
        mnuNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuNuevoActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuNuevo);

        mnuAbrir.setMnemonic('B');
        mnuAbrir.setText("Abrir");
        mnuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAbrirActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuAbrir);
        mnuArchivo.add(jSeparator1);

        mnuGuardar.setMnemonic('I');
        mnuGuardar.setText("Guardar");
        mnuGuardar.setToolTipText("");
        mnuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGuardarActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuGuardar);

        mnuGuardarComo.setMnemonic('I');
        mnuGuardarComo.setText("Guardar Como...");
        mnuGuardarComo.setToolTipText("");
        mnuGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGuardarComoActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuGuardarComo);
        mnuArchivo.add(jSeparator2);

        mnuImportImage.setMnemonic('I');
        mnuImportImage.setText("Importar Imagen");
        mnuImportImage.setToolTipText("");
        mnuImportImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuImportImageActionPerformed(evt);
            }
        });
        mnuArchivo.add(mnuImportImage);

        mnuPrincipal.add(mnuArchivo);

        mnuAyuda.setText("Ayuda");

        mnuAcercade.setText("Acerca de ..");
        mnuAyuda.add(mnuAcercade);

        mnuPrincipal.add(mnuAyuda);

        setJMenuBar(mnuPrincipal);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuImportImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuImportImageActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        ImageSelectionFilter imageSelectionFilter = new ImageSelectionFilter();
        fileChooser.addChoosableFileFilter(imageSelectionFilter);
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setFileFilter(imageSelectionFilter);
        
        //Add the preview pane.
        fileChooser.setAccessory(new ImagePreview(fileChooser));
        
        int result = fileChooser.showOpenDialog(this);
        //int result = fileChooser.showDialog(this,"Aceptar");
        if (result == JFileChooser.APPROVE_OPTION) {
            try{
                File sourceFile = fileChooser.getSelectedFile();
                /*File targetFile = new File(project.getParent() + "/" +project.getIdentity() + "/" + imgComponent.getIdentity().toString());                
                Files.copy(sourceFile.toPath(), targetFile.toPath());*/
                //imgComponent.setName(sourceFile.getName());
                //imgComponent.setAbsolutePath(targetFile.getAbsolutePath());
                
                System.out.println("Archivo seleccionado: " + sourceFile.getAbsolutePath());
                ImageInternalFrame imageInternalFrame = new ImageInternalFrame();
                //imageInternalFrame.setImage(imgComponent.getAbsolutePath());
                BufferedImage bufferedImage2 = ImageIO.read(sourceFile);
                bufferedImage2 = Utils.binarizarImagen(bufferedImage2);
                Pixel pixel1 = Utils.getPixel1(bufferedImage2);
                Pixel pixel4 = Utils.getPixel4(bufferedImage2);
                BufferedImage bufferedImage = bufferedImage2.getSubimage(pixel1.getX(), pixel1.getY(), pixel4.getX()-pixel1.getX(), pixel4.getY()- pixel1.getY());
                
                int width = bufferedImage.getWidth();
                int height = bufferedImage.getHeight();
                
                //byte[] bFile = new byte[(int) sourceFile.length()];
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write( bufferedImage, "png", baos );
                baos.flush();
                byte[] bFile = baos.toByteArray();
                baos.close();

                /*FileInputStream fileInputStream=null;
                
                fileInputStream = new FileInputStream(sourceFile);
                fileInputStream.read(bFile);
                fileInputStream.close();*/
                
                ImgComponent imgComponent = new ImgComponent();
                imgComponent.setName(sourceFile.getName());
                imgComponent.setbFile(bFile);
                imgComponent.setWidth(width);
                imgComponent.setHeight(height);
                
                FileWrapper.getInstance().updateImage(imgComponent.getIdentity().toString(), imgComponent.getName(), Arrays.toString(bFile), width, height);
                
                imageInternalFrame.setImage3(imgComponent.getIdentity().toString(), bFile, width, height);
               
                project.getImages().add(imgComponent);
                modelImagenes.insertNodeInto(new DefaultMutableTreeNode(project.getImages().get(project.getImages().size()-1)), imagenesNode, imagenesNode.getChildCount());
                desktopTabPanel.addTab(project.getImages().get(project.getImages().size()-1).getIdentity(), imgComponent.getName(), new JScrollPane(imageInternalFrame));
                    
            } catch (IOException ex) {
                Logger.getLogger(MdiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        fileChooser.setSelectedFile(null);
    }//GEN-LAST:event_mnuImportImageActionPerformed

    private void mnuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNuevoActionPerformed
                
        JFileChooser fileChooser = new JFileChooser();
        //fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setCurrentDirectory(new java.io.File("D:\\pr\\"));
        fileChooser.setDialogTitle("Ingrese el nombre del archivo");
        //fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); 
        
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            String name = "";
            if(fileChooser.getSelectedFile().getName().endsWith(".xml") ||
                    fileChooser.getSelectedFile().getName().endsWith(".XML")){
                name = fileChooser.getSelectedFile().getName();
            }else{
                name = fileChooser.getSelectedFile().getName() + ".xml";
            }
            System.out.println(fileChooser.getSelectedFile().getAbsolutePath());
            System.out.println(fileChooser.getSelectedFile().getParent());
            
            project = new Project();
            project.setName(name);
            project.setParent(fileChooser.getSelectedFile().getParent());
            
            //para el arbol
            root.setUserObject(project.getName());
            imagenesNode.removeAllChildren();
            modelImagenes.reload();
            
            //para el desktop
            desktopTabPanel.removeAll();
            
            //Creamos el directorio de las imagenes
            //ya no es necesario
            //File dirComponents = new File(project.getParent() + "/" + project.getIdentity().toString());
            //dirComponents.mkdir();
            
            //escribir el archivo nuevo                       
            //fileWrapper = new FileWrapper(project.getParent()  + "/" + project.getName() );
            FileWrapper.initializeInstance(project.getParent()  + "/" + project.getName());
            FileWrapper.getInstance().writeNew(project.getName());
            
        }
        fileChooser.setSelectedFile(null);
        
    }//GEN-LAST:event_mnuNuevoActionPerformed

    private void mnuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGuardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnuGuardarActionPerformed

    private void mnuGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGuardarComoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnuGuardarComoActionPerformed

    private void mnuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAbrirActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileSelectionFilter fileSelectionFilter = new FileSelectionFilter();
        fileChooser.addChoosableFileFilter(fileSelectionFilter);
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setFileFilter(fileSelectionFilter);
        
        int result = fileChooser.showOpenDialog(this);
        //int result = fileChooser.showDialog(this,"Aceptar");
        if (result == JFileChooser.APPROVE_OPTION) {
            try{
                File sourceFile = fileChooser.getSelectedFile();
                
                FileWrapper.initializeInstance(sourceFile.getParent()  + "/" + sourceFile.getName());
                project = FileWrapper.getInstance().read();
                
                //fileWrapper = new FileWrapper(project.getParent()  + "/" + project.getName() );
                
                //para el arbol
                root.setUserObject(project.getName());
                imagenesNode.removeAllChildren();
                modelImagenes.reload();
                
                fillTree();

                //para el desktop
                desktopTabPanel.addTab(UUID.randomUUID(),"Dummy", null);
                desktopTabPanel.removeAll();
                    
            } catch (Exception ex) {
                Logger.getLogger(MdiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        fileChooser.setSelectedFile(null);
        
    }//GEN-LAST:event_mnuAbrirActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        
        //aca guardar el txt
        JFileChooser fileChooser = new JFileChooser();
        //fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setCurrentDirectory(new java.io.File("D:\\pr\\"));
        fileChooser.setDialogTitle("Ingrese el nombre del archivo");
        //fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); 
        
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            /*String name = "";
            if(fileChooser.getSelectedFile().getName().endsWith(".txt") ||
                    fileChooser.getSelectedFile().getName().endsWith(".TXT")){
                name = fileChooser.getSelectedFile().getName();
            }else{
                name = fileChooser.getSelectedFile().getName() + ".txt";
            }*/
            //regargandoe el projecto en memoria
             project = FileWrapper.getInstance().read();
            PrintWriter writer = null;
            try {
                writer = new PrintWriter(fileChooser.getSelectedFile(), "utf-8");
                //new JScrollPane(imageInternalFrame) 
                //Component component = desktopTabPanel.getTabComponentAt(desktopTabPanel.getSelectedIndex());
                UUID uUID = desktopTabPanel.getListComponentes().get(desktopTabPanel.getSelectedIndex());
                for(int i=0; i<project.getImages().size(); i++){
                    if(uUID.compareTo(project.getImages().get(i).getIdentity()) == 0){
                        for(int j=0; j<project.getImages().get(i).getListXmlComponent().size(); j++){
                            //writer.println("Componente " + project.getImages().get(i).getListXmlComponent().get(j).getOrden() +
                            //        project.getImages().get(i).getListXmlComponent().get(j).getType());
                            int z = 1;
                            if(Constantes.COMPONENT_TYPE_CONNECTOR == project.getImages().get(i).getListXmlComponent().get(j).getType() ){
                                z = 0;
                            }
                            for(int k=0; k<project.getImages().get(i).getListXmlComponent().get(j).getListPixel().size(); k++){                               
                                writer.println(project.getImages().get(i).getListXmlComponent().get(j).getListPixel().get(k).getX() + 
                                        "\t" +
                                        project.getImages().get(i).getListXmlComponent().get(j).getListPixel().get(k).getY() + 
                                        "\t"+
                                        z);
                            }
                        }
                        int j = project.getImages().get(i).getListXmlComponent().size() - 1;
                        int k = project.getImages().get(i).getListXmlComponent().get(j).getListPixel().size() - 1;
                        List<Pixel> listPixelFinal = Utils.drawLine(project.getImages().get(i).getListXmlComponent().get(j).getListPixel().get(k).getX(),
                                project.getImages().get(i).getListXmlComponent().get(j).getListPixel().get(k).getY(), 0, 0);
                        for(int m=0; m<listPixelFinal.size(); m++){
                            writer.println(listPixelFinal.get(m).getX() + 
                                        "\t" +
                                        listPixelFinal.get(m).getY() + 
                                        "\t"+
                                        0);
                        }
                        break;
                    }
                }
                
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                try {writer.close();} catch (Exception ex) {}
            }
        }
        fileChooser.setSelectedFile(null);
    }//GEN-LAST:event_btnPlayActionPerformed

    private void fillTree(){
        root.setUserObject(project.getName());
        for(int i=0; i<project.getImages().size(); i++){
            modelImagenes.insertNodeInto(new DefaultMutableTreeNode(project.getImages().get(i)), imagenesNode, imagenesNode.getChildCount());
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MdiPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MdiPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MdiPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MdiPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MdiPrincipal().setVisible(true);
            }
        });
        System.out.println("color blanco: " + Color.WHITE.getRGB() + " color negro: " + Color.BLACK.getRGB());
        
    }
    
    private Project project;
    private DefaultMutableTreeNode root;
    private DefaultMutableTreeNode imagenesNode;
    private DefaultTreeModel modelImagenes;
    //FileWrapper fileWrapper = null;
    TreeComponentMouseListener treeComponentMouseListener = null;
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeshacer;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnSalir;
    private pe.com.wildcat.imgeditor.util.ClosableTabbedPane desktopTabPanel;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JMenuItem mnuAbrir;
    private javax.swing.JMenuItem mnuAcercade;
    private javax.swing.JMenu mnuArchivo;
    private javax.swing.JMenu mnuAyuda;
    private javax.swing.JMenuItem mnuGuardar;
    private javax.swing.JMenuItem mnuGuardarComo;
    private javax.swing.JMenuItem mnuImportImage;
    private javax.swing.JMenuItem mnuNuevo;
    private javax.swing.JMenuBar mnuPrincipal;
    private javax.swing.JPanel pnlComponentes;
    private javax.swing.JScrollPane scrollPaneComponentes;
    private javax.swing.JScrollPane scrollPaneRecursos;
    private javax.swing.JTabbedPane tabbedPaneComponentes;
    private javax.swing.JTabbedPane tabbedPaneRecursos;
    private javax.swing.JToolBar toolBarPrincipal;
    private javax.swing.JTree treeRecursos;
    // End of variables declaration//GEN-END:variables
}
